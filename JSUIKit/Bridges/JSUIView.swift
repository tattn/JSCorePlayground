//
//  This was auto-generated by make_bridge.rb
//
//  Created by 田中 達也 on 2016/10/09.
//  Copyright © 2016年 tattn. All rights reserved.
//

import UIKit
import JavaScriptCore

@objc protocol JSUIView: JSExport {
    static func userInterfaceLayoutDirectionForSemanticContentAttribute(_ attribute: UISemanticContentAttribute) -> UIUserInterfaceLayoutDirection
    static func beginAnimations(_ animationID: String?, context: UnsafePointer<UInt8>?)
    static func commitAnimations()
    static func setAnimationTransition(_ transition: UIViewAnimationTransition, view: UIView, cache: Bool)
    static func performWithoutAnimation()
    static func animateWithDuration(_ duration: TimeInterval, delay: TimeInterval, options: UIViewAnimationOptions)
    static func transitionWithView(_ view: UIView, duration: TimeInterval, options: UIViewAnimationOptions)
    static func transitionFromView(_ fromView: UIView, toView: UIView, duration: TimeInterval, options: UIViewAnimationOptions)
    static func performSystemAnimation(_ animation: UISystemAnimation, views: [UIView], options: UIViewAnimationOptions)
    static func animateKeyframesWithDuration(_ duration: TimeInterval, delay: TimeInterval, options: UIViewKeyframeAnimationOptions)
    static func addKeyframeWithRelativeStartTime(_ frameStartTime: Double, frameDuration: Double)
    static func keyCommandWithInput(_ input: String, modifierFlags: UIKeyModifierFlags, action: Selector) -> UIKeyCommand
    static func clearTextInputContextIdentifier(_ identifier: String)
    func initWithFrame(_ frame: CGRect) -> UIView
    func initWithCoder(_ aDecoder: NSCoder) -> UIView?
    func hitTest(_ point: CGPoint, event: UIEvent?) -> UIView?
    func pointInside(_ point: CGPoint, event: UIEvent?) -> Bool
    func convertPoint(_ point: CGPoint, view: UIView?) -> CGPoint
    func convertRect(_ rect: CGRect, view: UIView?) -> CGRect
    func sizeThatFits(_ size: CGSize) -> CGSize
    func sizeToFit()
    func removeFromSuperview()
    func insertSubview(_ view: UIView, index: Int)
    func exchangeSubviewAtIndex(_ index1: Int, index2: Int)
    func addSubview(_ view: UIView)
    func bringSubviewToFront(_ view: UIView)
    func sendSubviewToBack(_ view: UIView)
    func didAddSubview(_ subview: UIView)
    func willRemoveSubview(_ subview: UIView)
    func willMoveToSuperview(_ newSuperview: UIView?)
    func didMoveToSuperview()
    func willMoveToWindow(_ newWindow: UIWindow?)
    func didMoveToWindow()
    func isDescendantOfView(_ view: UIView) -> Bool
    func viewWithTag(_ tag: Int) -> UIView?
    func setNeedsLayout()
    func layoutIfNeeded()
    func layoutSubviews()
    func layoutMarginsDidChange()
    func drawRect(_ rect: CGRect)
    func setNeedsDisplay()
    func tintColorDidChange()
    func addGestureRecognizer(_ gestureRecognizer: UIGestureRecognizer)
    func removeGestureRecognizer(_ gestureRecognizer: UIGestureRecognizer)
    func gestureRecognizerShouldBegin(_ gestureRecognizer: UIGestureRecognizer) -> Bool
    func addMotionEffect(_ effect: UIMotionEffect)
    func removeMotionEffect(_ effect: UIMotionEffect)
    func addConstraint(_ constraint: NSLayoutConstraint)
    func addConstraints(_ constraints: [NSLayoutConstraint])
    func removeConstraint(_ constraint: NSLayoutConstraint)
    func removeConstraints(_ constraints: [NSLayoutConstraint])
    func updateConstraintsIfNeeded()
    func updateConstraints()
    func setNeedsUpdateConstraints()
    func alignmentRectForFrame(_ frame: CGRect) -> CGRect
    func frameForAlignmentRect(_ alignmentRect: CGRect) -> CGRect
    func invalidateIntrinsicContentSize()
    func contentHuggingPriorityForAxis(_ axis: UILayoutConstraintAxis) -> UILayoutPriority
    func setContentHuggingPriority(_ priority: UILayoutPriority, axis: UILayoutConstraintAxis)
    func contentCompressionResistancePriorityForAxis(_ axis: UILayoutConstraintAxis) -> UILayoutPriority
    func setContentCompressionResistancePriority(_ priority: UILayoutPriority, axis: UILayoutConstraintAxis)
    func systemLayoutSizeFittingSize(_ targetSize: CGSize) -> CGSize
    func addLayoutGuide(_ layoutGuide: UILayoutGuide)
    func removeLayoutGuide(_ layoutGuide: UILayoutGuide)
    func constraintsAffectingLayoutForAxis(_ axis: UILayoutConstraintAxis) -> [NSLayoutConstraint]
    func encodeRestorableStateWithCoder(_ coder: NSCoder)
    func decodeRestorableStateWithCoder(_ coder: NSCoder)
    func snapshotViewAfterScreenUpdates(_ afterUpdates: Bool) -> UIView?
    func resizableSnapshotViewFromRect(_ rect: CGRect, afterUpdates: Bool, capInsets: UIEdgeInsets) -> UIView?
    func drawViewHierarchyInRect(_ rect: CGRect, afterUpdates: Bool) -> Bool
    func touchesBegan(_ touches: Set<UITouch>, event: UIEvent?)
    func touchesMoved(_ touches: Set<UITouch>, event: UIEvent?)
    func touchesEnded(_ touches: Set<UITouch>, event: UIEvent?)
    func touchesCancelled(_ touches: Set<UITouch>, event: UIEvent?)
    func touchesEstimatedPropertiesUpdated(_ touches: Set<UITouch>)
    func pressesBegan(_ presses: Set<UIPress>, event: UIPressesEvent?)
    func pressesChanged(_ presses: Set<UIPress>, event: UIPressesEvent?)
    func pressesEnded(_ presses: Set<UIPress>, event: UIPressesEvent?)
    func pressesCancelled(_ presses: Set<UIPress>, event: UIPressesEvent?)
    func motionBegan(_ motion: UIEventSubtype, event: UIEvent?)
    func motionEnded(_ motion: UIEventSubtype, event: UIEvent?)
    func motionCancelled(_ motion: UIEventSubtype, event: UIEvent?)
    func remoteControlReceivedWithEvent(_ event: UIEvent?)
    func canPerformAction(_ action: Selector, sender: UIResponder?) -> Bool
    func targetForAction(_ action: Selector, sender: UIResponder?) -> UIView?
    func reloadInputViews()
    func updateUserActivityState(_ activity: NSUserActivity)
    func restoreUserActivityState(_ activity: NSUserActivity)
    static var layerClass: AnyClass { get }
    var userInteractionEnabled: Bool { get set }
    var tag: Int { get set }
    var layer: CALayer { get }
    var canBecomeFocused: Bool { get }
    var focused: Bool { get }
    var semanticContentAttribute: UISemanticContentAttribute { get set }
    var effectiveUserInterfaceLayoutDirection: UIUserInterfaceLayoutDirection { get }
    var frame: CGRect { get set }
    var bounds: CGRect { get set }
    var center: CGPoint { get set }
    var transform: CGAffineTransform { get set }
    var contentScaleFactor: CGFloat { get set }
    var multipleTouchEnabled: Bool { get set }
    var exclusiveTouch: Bool { get set }
    var autoresizesSubviews: Bool { get set }
    var autoresizingMask: UIViewAutoresizing { get set }
    var superview: UIView? { get }
    var subviews: [UIView] { get }
    var window: UIWindow? { get }
    var layoutMargins: UIEdgeInsets { get set }
    var preservesSuperviewLayoutMargins: Bool { get set }
    var layoutMarginsGuide: UILayoutGuide { get }
    var readableContentGuide: UILayoutGuide { get }
    var clipsToBounds: Bool { get set }
    var backgroundColor: UIColor? { get set }
    var alpha: CGFloat { get set }
    var opaque: Bool { get set }
    var clearsContextBeforeDrawing: Bool { get set }
    var hidden: Bool { get set }
    var contentMode: UIViewContentMode { get set }
    var contentStretch: CGRect { get set }
    var maskView: UIView? { get set }
    var tintColor: UIColor { get set }
    var tintAdjustmentMode: UIViewTintAdjustmentMode { get set }
    static var areAnimationsEnabled: Bool { get }
    static var inheritedAnimationDuration: TimeInterval { get }
    var gestureRecognizers: [UIGestureRecognizer]? { get set }
    var motionEffects: [UIMotionEffect] { get set }
    var constraints: [NSLayoutConstraint] { get }
    var translatesAutoresizingMaskIntoConstraints: Bool { get set }
    static var requiresConstraintBasedLayout: Bool { get }
    var alignmentRectInsets: UIEdgeInsets { get }
    var viewForFirstBaselineLayout: UIView { get }
    var viewForLastBaselineLayout: UIView { get }
    var intrinsicContentSize: CGSize { get }
    var layoutGuides: [UILayoutGuide] { get }
    var leadingAnchor: NSLayoutXAxisAnchor { get }
    var trailingAnchor: NSLayoutXAxisAnchor { get }
    var leftAnchor: NSLayoutXAxisAnchor { get }
    var rightAnchor: NSLayoutXAxisAnchor { get }
    var topAnchor: NSLayoutYAxisAnchor { get }
    var bottomAnchor: NSLayoutYAxisAnchor { get }
    var widthAnchor: NSLayoutDimension { get }
    var heightAnchor: NSLayoutDimension { get }
    var centerXAnchor: NSLayoutXAxisAnchor { get }
    var centerYAnchor: NSLayoutYAxisAnchor { get }
    var firstBaselineAnchor: NSLayoutYAxisAnchor { get }
    var lastBaselineAnchor: NSLayoutYAxisAnchor { get }
    var hasAmbiguousLayout: Bool { get }
    var restorationIdentifier: String? { get set }
    var needsDisplayInRect: CGRect { get set }
    var needsUpdateConstraints: Bool { get }
    var viewForBaselineLayout: UIView { get }
    static var animationDelegate: UIView? { get set }
    static var animationWillStartSelector: Selector? { get set }
    static var animationDidStopSelector: Selector? { get set }
    static var animationDuration: TimeInterval { get set }
    static var animationDelay: TimeInterval { get set }
    static var animationStartDate: Date { get set }
    static var animationCurve: UIViewAnimationCurve { get set }
    static var animationRepeatCount: Float { get set }
    static var animationRepeatAutoreverses: Bool { get set }
    static var animationBeginsFromCurrentState: Bool { get set }
    static var animationsEnabled: Bool { get set }
    var nextResponder: UIResponder? { get }
    var canBecomeFirstResponder: Bool { get }
    var canResignFirstResponder: Bool { get }
    var isFirstResponder: Bool { get }
    var undoManager: UndoManager? { get }
    var input: String { get }
    var modifierFlags: UIKeyModifierFlags { get }
    var discoverabilityTitle: String? { get set }
    var keyCommands: [UIKeyCommand]? { get }
    var inputView: UIView? { get }
    var inputAccessoryView: UIView? { get }
    var inputAssistantItem: UITextInputAssistantItem { get }
    var inputViewController: UIInputViewController? { get }
    var inputAccessoryViewController: UIInputViewController? { get }
    var textInputMode: UITextInputMode? { get }
    var textInputContextIdentifier: String? { get }
    var userActivity: NSUserActivity? { get set }
    var becomeFirstResponder: Bool { get }
    var resignFirstResponder: Bool { get }
    static func new() -> UIView
}

extension JSUIView where Self: UIView {
    static func new() -> Self {
        return self.init()
    }
}
