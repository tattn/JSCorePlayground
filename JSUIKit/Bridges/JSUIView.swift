//
//  This was auto-generated by make_bridge.rb
//
//  Created by 田中 達也 on 2016/10/05.
//  Copyright © 2016年 tattn. All rights reserved.
//

import UIKit
import JavaScriptCore

@objc protocol JSUIView: JSExport {
    static func addKeyframeWithRelativeStartTime(arg1: Double, arg2: Double, arg3: UIView)
    static func animateKeyframesWithDuration(arg1: Double, arg2: Double, arg3: UInt64, arg4: UIView, arg5: UIView)
    static func animateWithDuration(arg1: Double, arg2: UIView)
    static func animateWithInteractionProgress(arg1: UIView, arg2: UInt64, arg3: UIView, arg4: UIView)
    static func appearance() -> UIView
    static func appearanceForTraitCollection(arg1: UIView) -> UIView
    static func appearanceMatchingProperties(arg1: UIView, arg2: UIView) -> UIView
    static func appearanceWhenContainedIn(arg1: AnyClass) -> UIView
    static func appearanceWhenContainedInInstancesOfClasses(arg1: UIView) -> UIView
    static func areAnimationsEnabled() -> Bool
    static func beginAnimations(arg1: UIView)
    static func commitAnimations()
    static func disableAnimation()
    static func enableAnimation()
    static func endAnimations()
    static func flush()
    static func inheritedAnimationDuration() -> Double
    static func layerClass() -> AnyClass
    static func mapTrackedAnimations(arg1: UIView, arg2: UIView)
    static func modifyTrackedAnimations(arg1: UIView, arg2: Bool, arg3: UIView, arg4: UIView)
    static func performRunTransitions(arg1: UIView)
    static func performSystemAnimation(arg1: UInt64, arg2: UIView, arg3: UInt64, arg4: UIView, arg5: UIView)
    static func performWithModelChanges(arg1: UIView)
    static func performWithPropertyAccessMode(arg1: Int64, arg2: UIView)
    static func performWithVisualChanges(arg1: UIView)
    static func performWithoutAnimation(arg1: UIView)
    static func requiresConstraintBasedLayout() -> Bool
    static func setAnimationAutoreverses(arg1: Bool)
    static func setAnimationBeginsFromCurrentState(arg1: Bool)
    static func setAnimationCurve(arg1: Int64)
    static func setAnimationDelay(arg1: Double)
    static func setAnimationDelegate(arg1: UIView)
    static func setAnimationDidStopSelector(arg1: Selector)
    static func setAnimationDuration(arg1: Double)
    static func setAnimationFrameInterval(arg1: Double)
    static func setAnimationFromCurrentState(arg1: Bool)
    static func setAnimationPosition(arg1: CGPoint)
    static func setAnimationPreventsAdditive(arg1: Bool)
    static func setAnimationRepeatAutoreverses(arg1: Bool)
    static func setAnimationRepeatCount(arg1: Float)
    static func setAnimationRoundsToInteger(arg1: Bool)
    static func setAnimationStartDate(arg1: UIView)
    static func setAnimationStartTime(arg1: Double)
    static func setAnimationTransition(arg1: Int64, arg2: UIView)
    static func setAnimationWillStartSelector(arg1: Selector)
    static func setAnimationsEnabled(arg1: Bool)
    static func throttledFlush()
    static func transitionFromView(arg1: UIView, arg2: UIView, arg3: Double, arg4: UInt64, arg5: UIView)
    static func transitionWithView(arg1: UIView, arg2: Double, arg3: UInt64, arg4: UIView, arg5: UIView)
    static func userInterfaceLayoutDirectionForSemanticContentAttribute(arg1: Int64) -> Int64
    static func ph_videoOverlayButton() -> UIView
    static func pu_animateViews(arg1: UIView, arg2: Double, arg3: Double, arg4: UInt64, arg5: UIView, arg6: UIView)
    static func pu_animateWithDuration(arg1: Double, arg2: UIView)
    static func pu_animateWithEnforcedDuration(arg1: Double, arg2: UIView, arg3: UIView)
    static func pu_springOscillationRootAtIndex(arg1: Int64, arg2: Double, arg3: Double, arg4: Double, arg5: Double) -> Double
    static func pu_transitionWithView(arg1: UIView, arg2: Double, arg3: UInt64, arg4: UIView, arg5: UIView)
    static func sf_animate(arg1: Bool, arg2: UInt64, arg3: UIView, arg4: UIView)
    static func cam_setHiddenAnimationDuration() -> Double
    static func cam_transformForDeviceOrientation(arg1: Int64) -> CGAffineTransform
    static func cam_ceilBounds(arg1: CGRect, arg2: CGPoint, arg3: UIView)
    static func cam_convertRect(arg1: CGRect, arg2: CGRect, arg3: CGPoint, arg4: UIView)
    static func cam_setHiddenDefaultAnimationDuration() -> Double
    static func cam_transformForInterfaceOrientation(arg1: Int64) -> CGAffineTransform
    static func fiui_animateIfNeededWithDuration(arg1: Double, arg2: UIView)
    static func MPU_animateWithDuration(arg1: Double, arg2: Double, arg3: UInt64, arg4: UIView, arg5: UIView, arg6: UIView)
    static func naui_beginDisablingAnimations()
    static func naui_endDisablingAnimations()
    static func naui_performAnimateableChangesWithAnimationDuration(arg1: Double, arg2: UIView, arg3: UIView, arg4: UIView)
    static func naui_prepareToAutolayoutProperDescendantsOfView(arg1: UIView, arg2: UIView)
    static func ic_animateWithDuration(arg1: Double, arg2: UIView, arg3: UIView)
    static func ic_performWithoutAnimation(arg1: UIView)
    static func pkui_animateUsingOptions(arg1: UInt64, arg2: UIView, arg3: UIView)
    static func PG_animateUsingDefaultDampedSpringWithInitialSpringVelocity(arg1: Double, arg2: UIView, arg3: UIView)
    static func PG_animateUsingDefaultTimingWithAnimations(arg1: UIView, arg2: UIView)
    static func PG_animateUsingDefaultTimingWithOptions(arg1: UInt64, arg2: UIView, arg3: UIView)
    static func PG_performWithoutAnimation(arg1: UIView)
    static func PG_transitionViews(arg1: UIView, arg2: Bool, arg3: Bool)
    static func pl_setHiddenAnimationDuration() -> Double
    static func pl_videoOverlayButtonSize() -> CGSize
    static func pl_videoOverlayButtonWithStyle(arg1: Int64) -> UIView
    static func px_animateUsingDefaultDampedEaseInEaseOutWithDuration(arg1: Double, arg2: UIView, arg3: UIView)
    static func px_videoOverlayButtonSize() -> CGSize
    static func px_videoOverlayButtonWithStyle(arg1: Int64) -> UIView
    static func isDebugBoundingBoxesEnabled() -> Bool
    static func load()
    static func siriChevronShouldBeOnLeadingSide() -> Bool
    static func tpSetSemanticContentAttribute_recursive(arg1: Int64, arg2: UIView)
    static func rc_beginDebuggingAutolayout()
    static func rc_beginDisablingAnimations()
    static func rc_endDisablingAnimations()
    static func rc_performAnimateableChangesWithAnimationDuration(arg1: Double, arg2: UIView, arg3: UIView, arg4: UIView)
    static func rc_prepareToAutolayoutProperDescendantsOfView(arg1: UIView, arg2: UIView)
    func actionForLayer(arg1: UIView, arg2: UIView) -> UIView
    func addAnimation(arg1: UIView, arg2: UIView)
    func addConstraint(arg1: UIView)
    func addConstraints(arg1: UIView)
    func addGestureRecognizer(arg1: UIView)
    func addLayoutGuide(arg1: UIView)
    func addMotionEffect(arg1: UIView)
    func addSubview(arg1: UIView)
    func alignmentRectForFrame(arg1: CGRect) -> CGRect
    func animator(arg1: UIView, arg2: UIView)
    func applyUpdatesRecursively()
    func bringSubviewToFront(arg1: UIView)
    func compareTextEffectsOrdering(arg1: UIView) -> Int64
    func constraintsAffectingLayoutForAxis(arg1: Int64) -> UIView
    func constraintsDidChangeInEngine(arg1: UIView)
    func containsView(arg1: UIView) -> Bool
    func contentCompressionResistancePriorityForAxis(arg1: Int64) -> Float
    func contentHuggingPriorityForAxis(arg1: Int64) -> Float
    func convertPoint(arg1: CGPoint, arg2: UIView) -> CGPoint
    func convertRect(arg1: CGRect, arg2: UIView) -> CGRect
    func convertSize(arg1: CGSize, arg2: UIView) -> CGSize
    func createSnapshotWithRect(arg1: CGRect) -> CGImage
    func dealloc()
    func deferredBecomeFirstResponder()
    func didAddSubview(arg1: UIView)
    func didMoveToSuperview()
    func didMoveToWindow()
    func didUpdateFocusFromView(arg1: UIView)
    func didUpdateFocusInContext(arg1: UIView, arg2: UIView)
    func drawLayer(arg1: UIView, arg2: CGContext)
    func drawRect(arg1: CGRect)
    func drawViewHierarchyInRect(arg1: CGRect) -> Bool
    func emptySubviewsOfGeneratorSubhierarchy()
    func encodeWithCoder(arg1: UIView)
    func endEditing(arg1: Bool) -> Bool
    func engine(arg1: UIView, arg2: UIView) -> UIView
    func exchangeSubviewAtIndex(arg1: Int64, arg2: Int64)
    func exerciseAmbiguityInLayout()
    func focusedViewDidChange()
    func focusedViewWillChange()
    func forceDisplayIfNeeded()
    func frameForAlignmentRect(arg1: CGRect) -> CGRect
    func gestureRecognizerShouldBegin(arg1: UIView) -> Bool
    func initWithCoder(arg1: UIView) -> UIView
    func initWithFrame(arg1: CGRect) -> UIView
    func initWithSize(arg1: CGSize) -> UIView
    func insertSubview(arg1: UIView, arg2: UIView)
    func interactionTintColorDidChange()
    func invalidateIntrinsicContentSize()
    func isAncestorOfItem(arg1: UIView) -> Bool
    func isDescendantOfView(arg1: UIView) -> Bool
    func layerWillDraw(arg1: UIView)
    func layoutBelowIfNeeded()
    func layoutIfNeeded()
    func layoutMarginsDidChange()
    func layoutSublayersOfLayer(arg1: UIView)
    func layoutSubviews()
    func movedFromSuperview(arg1: UIView)
    func movedFromWindow(arg1: UIView)
    func movedToSuperview(arg1: UIView)
    func movedToWindow(arg1: UIView)
    func newSnapshotWithRect(arg1: CGRect) -> CGImage
    func nsis_descriptionOfVariable(arg1: UIView) -> UIView
    func nsis_shouldIntegralizeVariable(arg1: UIView) -> Bool
    func nsis_valueOfVariable(arg1: UIView, arg2: UIView)
    func nsis_valueOfVariableIsUserObservable(arg1: UIView) -> Bool
    func nsli_addConstraint(arg1: UIView)
    func nsli_convertSizeFromEngineSpace(arg1: CGSize) -> CGSize
    func nsli_convertSizeToEngineSpace(arg1: CGSize) -> CGSize
    func nsli_engineToUserScalingCoefficientsInEngine(arg1: UIView) -> CGSize
    func nsli_isCollectingConstraintChangesForLaterCoordinatedFlush(arg1: UIView) -> Bool
    func nsli_layoutAnchorForAttribute(arg1: Int64) -> UIView
    func nsli_lowerAttribute(arg1: Int, arg2: UIView, arg3: Double, arg4: UIView) -> Bool
    func nsli_marginOffsetForAttribute(arg1: Int64) -> Double
    func nsli_removeConstraint(arg1: UIView) -> Bool
    func nsli_resolvedValue(arg1: UnsafeMutablePointer<CGFloat>?, arg2: UIView, arg3: UIView, arg4: UnsafePointer<UInt8>) -> Bool
    func performCompletionAppearanceCallbacksForSubHierarchy()
    func performCompletionAppearanceCallbacksForSubview(arg1: UIView)
    func performCompletionCallbacksPending(arg1: Bool)
    func performForSubviewsInAllVisualStates(arg1: UIView)
    func prepareViewVisualStateOfViewSubhierarchy()
    func pushVisualStateRecursively()
    func recursivelyForceDisplayIfNeeded()
    func reduceWidth(arg1: Double)
    func removeAllGestureRecognizers()
    func removeConstraint(arg1: UIView)
    func removeConstraints(arg1: UIView)
    func removeFromSuperview()
    func removeGestureRecognizer(arg1: UIView)
    func removeLayoutGuide(arg1: UIView)
    func removeMotionEffect(arg1: UIView)
    func resizableSnapshotFromRect(arg1: CGRect, arg2: UIEdgeInsets) -> UIView
    func resizableSnapshotViewFromRect(arg1: CGRect, arg2: Bool, arg3: UIEdgeInsets) -> UIView
    func resizeSubviewsWithOldSize(arg1: CGSize)
    func resizeWithOldSuperviewSize(arg1: CGSize)
    func resolvePendingAppearanceCallbacks()
    func resolvePendingAppearanceCallbacksRecursivelyInSubHierarchy()
    func resolvePendingDisappearanceCallbacksRecursively()
    func restoreUserActivityState(arg1: UIView)
    func rotateToDegrees(arg1: Float)
    func sendAppearanceCallbacksForAppearingViewWithSubHierarchyAppearanceState(arg1: Int64, arg2: Bool, arg3: Int64)
    func sendAppearanceCallbacksForDisappearingViewWithSubHierarchyAppearanceState(arg1: Int64, arg2: Bool)
    func sendSubviewToBack(arg1: UIView)
    func sendViewDidAppearAnimated(arg1: Bool)
    func sendViewDidDisappearAnimated(arg1: Bool)
    func sendViewWillAppearAnimated(arg1: Bool)
    func sendViewWillDisappearAnimated(arg1: Bool)
    func setContentCompressionResistancePriority(arg1: Float, arg2: Int64)
    func setContentHuggingPriority(arg1: Float, arg2: Int64)
    func setNeedsDisplay()
    func setNeedsFocusUpdate()
    func setNeedsLayout()
    func setNeedsPreferredFocusedItemUpdate()
    func setNeedsUpdateConstraints()
    func setNeedsUpdateViewHierarchy()
    func setNeedsUpdateViewHierarchyIfSizeChanged()
    func setRotationDegrees(arg1: Float, arg2: Double)
    func setValue(arg1: UIView, arg2: Int)
    func shouldChangeFocusedItem(arg1: UIView) -> Bool
    func shouldUpdateFocusFromView(arg1: UIView, arg2: UIView, arg3: UInt64) -> Bool
    func shouldUpdateFocusInContext(arg1: UIView) -> Bool
    func sizeThatFits(arg1: CGSize) -> CGSize
    func sizeToFit()
    func snapshotViewAfterScreenUpdates(arg1: Bool) -> UIView
    func solutionDidChangeInEngine(arg1: UIView)
    func stateForGestureType(arg1: Int) -> Int
    func systemLayoutSizeFittingSize(arg1: CGSize) -> CGSize
    func tintColorDidChange()
    func traitCollectionDidChange(arg1: UIView)
    func updateConstraints()
    func updateConstraintsIfNeeded()
    func updateFocusIfNeeded()
    func updateIfNeededRecursively()
    func updatePreferredFocusedItemIfNeeded()
    func updateUserActivityState(arg1: UIView)
    func valueForGestureAttribute(arg1: Int) -> UIView
    func viewDidMoveToSuperview()
    func viewWillMoveToSuperview(arg1: UIView)
    func viewWithTag(arg1: Int64) -> UIView
    func willMoveToSuperview(arg1: UIView)
    func willMoveToWindow(arg1: UIView)
    func willRemoveSubview(arg1: UIView)
    func willUpdateFocusInContext(arg1: UIView, arg2: UIView)
    func willUpdateFocusToView(arg1: UIView)
    func zoomToScale(arg1: Float)
    func abIndexPathOfSubview(arg1: UIView) -> UIView
    func abSetLayoutDebuggingColor(arg1: UIView)
    func abSubviewAtIndexPath(arg1: UIView) -> UIView
    func infoCardThemeChanged(arg1: UIView)
    func clearArtworkCatalogs()
    func mf_setAsSourceForPopoverPresentationController(arg1: UIView)
    func pu_addTransform(arg1: CGAffineTransform)
    func pu_animateBarTransitionWithContext(arg1: UIView)
    func pu_convertTransform(arg1: CGAffineTransform, arg2: UIView) -> CGAffineTransform
    func pu_removeAllGeometryAnimationsRecursively(arg1: Bool)
    func pu_setCenterAndBoundsForFrameRect(arg1: CGRect)
    func QL_setAnchorPointAndUpdatePosition(arg1: CGPoint)
    func ss_setUntransformedFrame(arg1: CGRect)
    func ax_addedConstraintForLayoutAttribute(arg1: Int64, arg2: Double) -> UIView
    func ax_constrainLayoutAttribute(arg1: Int64, arg2: Double)
    func ax_firstCommonAncestorWithView(arg1: UIView) -> UIView
    func ax_pinConstraintsInAllDimensionsToView(arg1: UIView) -> UIView
    func bs_setHitTestingDisabled(arg1: Bool)
    func cam_addConstraint(arg1: UIView, arg2: UIView)
    func cam_addConstraints(arg1: UIView, arg2: UIView)
    func cam_clearAllConstraintsForKey(arg1: UIView)
    func cam_constraintsForKey(arg1: UIView) -> UIView
    func cam_hasConstraintForKey(arg1: UIView) -> Bool
    func cam_isOnScreen(arg1: UIView) -> Bool
    func cam_removeAllConstraintsForKey(arg1: UIView)
    func cam_rotateWithDeviceOrientation(arg1: Int64, arg2: Bool)
    func cam_setHidden(arg1: Bool, arg2: Bool)
    func cam_ensureSubview(arg1: UIView)
    func cam_isPoint(arg1: CGPoint, arg2: UIEdgeInsets) -> Bool
    func cam_removeAnimationForKey(arg1: UIView, arg2: Bool)
    func cam_removeAnimationsForKeys(arg1: UIView, arg2: Bool)
    func cam_rotateWithInterfaceOrientation(arg1: Int64, arg2: Bool)
    func cam_setBorder()
    func cam_setBorderColor(arg1: UIView)
    func layoutGradientViewsIfNeeded()
    func messageAcknowledgmentBounceView(arg1: UIView)
    func messageAcknowledgmentShrinkViewToPoint(arg1: CGPoint, arg2: UIView)
    func pointMostlyInside(arg1: CGPoint, arg2: Double, arg3: CGPoint) -> Bool
    func setGradientViewsNeedLayout()
    func rotateView(arg1: UIView, arg2: Double) -> UIView
    func ccuiPunchOutMaskForView(arg1: UIView) -> UIView
    func ccuiSupportsDelayedTouchesByContainingScrollViewForGesture(arg1: UIView) -> Bool
    func addConstraintsToSetSize(arg1: CGSize) -> UIView
    func centerHorizontallyInSuperview()
    func centerVerticallyInSuperview()
    func newPathForRoundedRect(arg1: CGRect, arg2: Double) -> CGPath
    func setRandomDebugHighlight()
    func centerHorizontalInView(arg1: UIView)
    func centerVerticalInView(arg1: UIView)
    func music_inheritedLayoutInsetsDidChange()
    func music_setLayoutInsets(arg1: UIEdgeInsets)
    func hk_addConstraintsWithFormat(arg1: UIView, arg2: UInt64, arg3: UIView, arg4: UIView) -> UIView
    func hk_addEqualsConstraintWithItem(arg1: UIView, arg2: Int64, arg3: UIView, arg4: Int64, arg5: Double) -> UIView
    func hu_autoSizeByConstrainingWidth(arg1: Double)
    func hu_traverseViewHierarchy(arg1: UIView)
    func MPU_applyBoundsAndCenterForUntransformedFrame(arg1: CGRect)
    func removeConstraintsWithSubView(arg1: UIView)
    func mt_concatPixelAlignedTransform(arg1: CGAffineTransform)
    func mt_setPixelAlignedCenter(arg1: CGPoint)
    func ntk_setBoundsAndPositionFromFrame(arg1: CGRect)
    func naui_addConstraint(arg1: UIView)
    func naui_addConstraints(arg1: UIView)
    func naui_isProperDescendantOfView(arg1: UIView) -> Bool
    func naui_performAnimateableConstraintChanges(arg1: UIView)
    func naui_reloadDynamicFontWithTextStyleDescriptor(arg1: UIView)
    func naui_removeConstraint(arg1: UIView)
    func naui_removeConstraints(arg1: UIView)
    func naui_removeConstraintsNamed(arg1: UIView)
    func naui_removeNamedConstraints()
    func naui_replaceConstraint(arg1: UIView, arg2: UIView) -> Bool
    func naui_replaceConstraints(arg1: UIView, arg2: UIView) -> Bool
    func naui_setDynamicFontTextStyleDescriptor(arg1: UIView)
    func naui_setNamedConstraints(arg1: UIView, arg2: UIView)
    func naui_showAllViewBoundsRecursively(arg1: Bool)
    func addBorderWithColor(arg1: UIView)
    func addDefaultTransformSpringWithStartTime(arg1: Double)
    func addDefaultTranslationSpringWithVelocity(arg1: Double, arg2: Double)
    func addTransformSpringWithMass(arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: UIView)
    func addTranslationSpringWithMass(arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: UIView)
    func pk_applyAppearance(arg1: UIView)
    func pkui_readableContentBoundsWithMargins(arg1: UIEdgeInsets) -> CGRect
    func pkui_setBounds(arg1: CGRect, arg2: CGPoint, arg3: Bool) -> Bool
    func pkui_setFrame(arg1: CGRect, arg2: Bool) -> Bool
    func pkui_shakeWithCompletion(arg1: UIView)
    func PG_setAllowsEdgeAntialiasing(arg1: Bool)
    func PG_setAllowsGroupBlending(arg1: Bool)
    func PG_setAnchorPoint(arg1: CGPoint)
    func PG_setCompositingFilter(arg1: UIView)
    func PG_setCornerRadius(arg1: Double)
    func PG_setHasRoundedCorners(arg1: Bool, arg2: Bool)
    func pl_drawBorderWithColor(arg1: UIView, arg2: Double)
    func pl_isOnScreen(arg1: UIView) -> Bool
    func pl_setHidden(arg1: Bool, arg2: Bool)
    func is_actionForKey(arg1: UIView) -> UIView
    func is_setBlurRadius(arg1: Double)
    func px_animateAlpha(arg1: Bool, arg2: Int64, arg3: UIView)
    func px_animateWithZoomTransitionContext(arg1: UIView)
    func px_enumerateDescendantSubviewsWithBlock(arg1: UIView)
    func px_setSpec(arg1: UIView)
    func px_transferToSuperview(arg1: UIView, arg2: UIView)
    func isContainedByItem(arg1: UIView) -> Bool
    func observeValueForKeyPath(arg1: UIView, arg2: UIView, arg3: UIView, arg4: UnsafeMutableRawPointer)
    func recursive_setSemanticContentAttribute(arg1: Int64)
    func siriui_addHeightConstraint(arg1: Double) -> UIView
    func siriui_addWidthConstraint(arg1: Double) -> UIView
    func siriui_centerHorizontallyWithItem(arg1: UIView, arg2: Double) -> UIView
    func siriui_centerVerticallyWithItem(arg1: UIView, arg2: Double) -> UIView
    func siriui_centerVerticallyWithView(arg1: UIView, arg2: Double, arg3: Float) -> UIView
    func siriui_pinBottomTo(arg1: UIView, arg2: Double) -> UIView
    func siriui_pinBottomToTopOf(arg1: UIView, arg2: Double) -> UIView
    func siriui_pinLastBaselineToFirstBaseline(arg1: UIView, arg2: Double) -> UIView
    func siriui_pinLeadingTo(arg1: UIView, arg2: Double) -> UIView
    func siriui_pinLeadingToLeadingEdgeOf(arg1: UIView, arg2: Double) -> UIView
    func siriui_pinLeadingToTrailingEdgeOf(arg1: UIView, arg2: Double) -> UIView
    func siriui_pinToLayoutGuide(arg1: UIView) -> UIView
    func siriui_pinToSuperviewWithEdgeInsets(arg1: UIEdgeInsets) -> UIView
    func siriui_pinTopTo(arg1: UIView, arg2: Double) -> UIView
    func siriui_pinTrailingTo(arg1: UIView, arg2: Double) -> UIView
    func siriui_pinTrailingToLeadingEdgeOf(arg1: UIView, arg2: Double) -> UIView
    func siriui_pinTrailingToTrailingEdgeOf(arg1: UIView, arg2: Double) -> UIView
    func suic_recursiveSetSemanticContentAttribute(arg1: Int64)
    func suic_updateViewHierarchyToUseSiriLanguageSemanticContentAttribute()
    func ancestorViewOfClass(arg1: AnyClass) -> UIView
    func ancestorViewOfInstance(arg1: UIView) -> UIView
    func sbui_drawEagerly()
    func sb_setBoundsAndPositionFromFrame(arg1: CGRect)
    func tk_addedConstraintForLayoutAttribute(arg1: Int64, arg2: Double) -> UIView
    func tk_addedConstraintFotLayoutAttribute(arg1: Int64, arg2: UIView, arg3: Double) -> UIView
    func tk_constrainLayoutAttribute(arg1: Int64, arg2: Double)
    func tk_firstCommonAncestorWithView(arg1: UIView) -> UIView
    func accessibilityConvertPointFromSceneReferenceCoordinates(arg1: CGPoint) -> CGPoint
    func accessibilityConvertRectToSceneReferenceCoordinates(arg1: CGRect) -> CGRect
    func nc_applyVibrantStyling(arg1: UIView)
    func nc_removeAllVibrantStyling()
    func rc_addConstraint(arg1: UIView)
    func rc_addConstraints(arg1: UIView)
    func rc_addConstraintsForFittingToMinimumSize()
    func rc_isProperDescendantOfView(arg1: UIView) -> Bool
    func rc_layoutBelowIfNeeded()
    func rc_loadInvariantConstraintsWithBlock(arg1: UIView)
    func rc_reloadConstraintsNamed(arg1: UIView, arg2: UIView, arg3: UIView)
    func rc_removeConstraint(arg1: UIView)
    func rc_removeConstraints(arg1: UIView)
    func rc_removeConstraintsNamed(arg1: UIView)
    func rc_removeNamedConstraints()
    func rc_replaceConstraint(arg1: UIView, arg2: UIView) -> Bool
    func rc_replaceConstraints(arg1: UIView, arg2: UIView) -> Bool
    func rc_setAccessibilityLabel(arg1: UIView)
    func rc_setAutoUpdatingTextStyle(arg1: UIView)
    func rc_setCharge(arg1: Float)
    func rc_setNamedConstraints(arg1: UIView, arg2: UIView)
    func rc_showAllViewBoundsRecursively(arg1: Bool)
    func rc_updateConstraintsAndLayoutSubtree()
    func centerSubviewInBounds(arg1: UIView)
    func superviewOfClass(arg1: AnyClass) -> UIView
    var alignmentRectInsets: UIEdgeInsets { get }
    var alpha: Double { get set }
    var autorelease: UIView { get }
    var autoresizesSubviews: Bool { get set }
    var autoresizingMask: UInt64 { get set }
    var backgroundColor: UIView { get set }
    var becomeFirstResponder: Bool { get }
    var bottomAnchor: UIView { get }
    var bounds: CGRect { get set }
    var canBecomeFirstResponder: Bool { get }
    var canBecomeFocused: Bool { get }
    var canHandleGestures: Bool { get }
    var cancelMouseTracking: Bool { get }
    var cancelTouchTracking: Bool { get }
    var center: CGPoint { get set }
    var centerXAnchor: UIView { get }
    var centerYAnchor: UIView { get }
    var charge: Float { get set }
    var clearsContextBeforeDrawing: Bool { get set }
    var clipsToBounds: Bool { get set }
    var constraints: UIView { get }
    var contentMode: Int64 { get set }
    var contentScaleFactor: Double { get set }
    var contentStretch: CGRect { get set }
    var deliversButtonsForGesturesToSuperview: Bool { get set }
    var deliversTouchesForGesturesToSuperview: Bool { get set }
    var description: UIView { get }
    var effectiveUserInterfaceLayoutDirection: Int64 { get }
    var enabledGestures: Int { get set }
    var extent: CGRect { get }
    var firstBaselineAnchor: UIView { get }
    var focusGuides: UIView { get }
    var focusedView: UIView { get }
    var frame: CGRect { get set }
    var frameOrigin: CGPoint { get set }
    var gestureDelegate: UIView { get set }
    var gestureRecognizers: UIView { get set }
    var gesturesEnabled: Bool { get set }
    var hasAmbiguousLayout: Bool { get }
    var heightAnchor: UIView { get }
    var hitRect: CGRect { get }
    var inFullyAppearedState: Bool { get }
    var inFullyDisappearedState: Bool { get }
    var interactionTintColor: UIView { get set }
    var intrinsicContentSize: CGSize { get }
    var isAccessibilityElementByDefault: Bool { get }
    var isElementAccessibilityExposedToInterfaceBuilder: Bool { get }
    var isEnabled: Bool { get }
    var isExclusiveTouch: Bool { get }
    var isFocused: Bool { get }
    var isHidden: Bool { get }
    var isHiddenOrHasHiddenAncestor: Bool { get }
    var isMultipleTouchEnabled: Bool { get }
    var isOpaque: Bool { get }
    var isUserInteractionEnabled: Bool { get }
    var lastBaselineAnchor: UIView { get }
    var layer: UIView { get }
    var layoutGuides: UIView { get }
    var layoutMargins: UIEdgeInsets { get set }
    var layoutMarginsFollowReadableWidth: Bool { get set }
    var layoutMarginsGuide: UIView { get }
    var leadingAnchor: UIView { get }
    var leftAnchor: UIView { get }
    var maskView: UIView { get set }
    var motionEffects: UIView { get set }
    var needsDisplay: Bool { get }
    var needsDisplayOnBoundsChange: Bool { get set }
    var needsUpdateConstraints: Bool { get }
    var nextResponder: UIView { get }
    var nsli_autoresizingMask: UInt64 { get }
    var nsli_boundsHeightVariable: UIView { get }
    var nsli_boundsWidthVariable: UIView { get }
    var nsli_canHostIndependentVariableAnchor: Bool { get }
    var nsli_contentHeightVariable: UIView { get }
    var nsli_contentWidthVariable: UIView { get }
    var nsli_description: UIView { get }
    var nsli_descriptionIncludesPointer: Bool { get }
    var nsli_engineToUserScalingCoefficients: CGSize { get }
    var nsli_heightVariable: UIView { get }
    var nsli_installedConstraints: UIView { get }
    var nsli_isFlipped: Bool { get }
    var nsli_isLegalConstraintItem: Bool { get }
    var nsli_isRTL: Bool { get }
    var nsli_layoutEngine: UIView { get }
    var nsli_minXVariable: UIView { get }
    var nsli_minYVariable: UIView { get }
    var nsli_superitem: UIView { get }
    var nsli_widthVariable: UIView { get }
    var origin: CGPoint { get set }
    var position: CGPoint { get set }
    var preferredFocusEnvironments: UIView { get }
    var preferredFocusedItem: UIView { get }
    var preferredFocusedView: UIView { get }
    var preservesSuperviewLayoutMargins: Bool { get set }
    var previewingSegueTemplateStorage: UIView { get set }
    var previousViewModel: UIView { get }
    var previousVisualState: UIView { get set }
    var readableContentGuide: UIView { get }
    var recursiveDescription: UIView { get }
    var retain: UIView { get }
    var retainCount: UInt64 { get }
    var rightAnchor: UIView { get }
    var rotationDegrees: Float { get }
    var scriptingInfoWithChildren: UIView { get }
    var semanticContentAttribute: Int64 { get set }
    var clearsContext: Bool { get set }
    var clipsSubviews: Bool { get set }
    var contentsPosition: Int { get set }
    var enabled: Bool { get set }
    var exclusiveTouch: Bool { get set }
    var fixedBackgroundPattern: Bool { get set }
    var hidden: Bool { get set }
    var multipleTouchEnabled: Bool { get set }
    var needsDisplayInRect: CGRect { get set }
    var opaque: Bool { get set }
    var rotationBy: Float { get set }
    var size: CGSize { get set }
    var skipsSubviewEnumeration: Bool { get set }
    var tag: Int64 { get set }
    var tapDelegate: UIView { get set }
    var tintAdjustmentMode: Int64 { get set }
    var tintColor: UIView { get set }
    var transform: CGAffineTransform { get set }
    var translatesAutoresizingMaskIntoConstraints: Bool { get set }
    var userInteractionEnabled: Bool { get set }
    var viewGenerationInfo: UIView { get set }
    var viewGenerator: UIView { get set }
    var viewTraversalMark: Bool { get set }
    var viewsWithPendingAppearanceCompletionCallbacks: UIView { get set }
    var visualState: UIView { get set }
    var wantsDeepColorDrawing: Bool { get set }
    var snapshot: UIView { get }
    var snapshotView: UIView { get }
    var stateData: UIView { get }
    var subviews: UIView { get }
    var superview: UIView { get }
    var temporaryAppearanceStateClean: Bool { get }
    var textEffectsVisibilityLevel: Int { get }
    var textEffectsVisibilityLevelInKeyboardWindow: Int { get }
    var textInputView: UIView { get }
    var topAnchor: UIView { get }
    var trailingAnchor: UIView { get }
    var traitCollection: UIView { get }
    var updateIfNeeded: UIView { get }
    var useBlockyMagnificationInClassic: Bool { get }
    var viewForBaselineLayout: UIView { get }
    var viewForFirstBaselineLayout: UIView { get }
    var viewForLastBaselineLayout: UIView { get }
    var viewGeneratorAppearanceState: Int64 { get }
    var viewGeneratorNewChange: Bool { get }
    var viewPresentation: UIView { get }
    var viewPrintFormatter: UIView { get }
    var visibleBounds: CGRect { get }
    var widthAnchor: UIView { get }
    var window: UIView { get }
    var ancestorBackdropView: UIView { get }
    var tintColorOverride: UIView { get }
    var artworkCatalog: UIView { get }
    var mf_currentScreenScale: Double { get }
    var mf_enclosingScrollView: UIView { get }
    var mf_frontSibling: UIView { get }
    var pu_hasHiddenAncestor: Bool { get }
    var ss_untransformedFrame: CGRect { get }
    var akEnclosingScrollView: UIView { get }
    var akVisibleRect: CGRect { get }
    var bs_isHitTestingDisabled: Bool { get }
    var currentLayer: UIView { get }
    var ccuiPunchOutMaskedContainer: UIView { get }
    var addConstraintsToFillSuperview: UIView { get }
    var allSubviews: UIView { get }
    var debugHighlight: UIView { get set }
    var generateImage: UIView { get }
    var roundedRectBackgroundColor: UIView { get set }
    var roundedRectBorderColor: UIView { get set }
    var roundedRectBorderWidth: UIView { get set }
    var music_inheritedLayoutInsets: UIEdgeInsets { get }
    var music_layoutInsets: UIEdgeInsets { get }
    var integralCenter: CGPoint { get set }
    var hk_isLeftToRight: Bool { get }
    var hu_centerInGlobalCoordinateSpace: CGPoint { get }
    var hu_frameInGlobalCoordinateSpace: CGRect { get }
    var MPU_vibrantContentEffectView: UIView { get }
    var initForAutolayout: UIView { get }
    var boundsCenter: CGPoint { get }
    var naui_canAnimate: Bool { get }
    var naui_descendantsWithAmbiguousLayout: UIView { get }
    var naui_dynamicFontTextStyleDescriptor: UIView { get }
    var ic_backingScaleFactor: Double { get }
    var PDFKitEnclosingScrollView: UIView { get }
    var pk_childrenForAppearance: UIView { get }
    var pkui_translationAnimation: UIView { get }
    var pkui_viewControllerFromResponderChain: UIView { get }
    var PG_allowsEdgeAntialiasing: Bool { get }
    var PG_allowsGroupBlending: Bool { get }
    var PG_anchorPoint: CGPoint { get }
    var PG_compositingFilter: UIView { get }
    var PG_cornerRadius: Double { get }
    var is_blurRadius: Double { get }
    var px_screenScale: Double { get }
    var px_spec: UIView { get }
    var ancestorViews: UIView { get }
    var descendantViews: UIView { get }
    var indexInSuperview: Int64 { get }
    var levelInHierarchy: Int64 { get }
    var layerMaskWithImage: UIView { get set }
    var siblingViewsAbove: UIView { get }
    var siblingViewsUnder: UIView { get }
    var viewsAbove: UIView { get }
    var viewsUnder: UIView { get }
    var containerView: UIView { get }
    var view: UIView { get }
    var layerFromSnapshot: UIView { get }
    var skui_apparentBackgroundColor: UIView { get }
    var rc_autoUpdatingTextStyle: UIView { get }
    var rc_autolayoutView: UIView { get }
    var rc_canAnimate: Bool { get }
    var rc_charge: Float { get }
    var firstScrollViewDescendant: UIView { get }
    static func new() -> UIView
}

extension JSUIView where Self: UIView {
    static func new() -> Self {
        return self.init()
    }
}
