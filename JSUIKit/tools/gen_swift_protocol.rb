

def generate_swift_protocol data
  classname        = data[:class_name]
  static_methods   = data[:static_methods]
  instance_methods = data[:instance_methods]
  properties       = data[:properties]

  result = <<~EOS
  //
  //  This was auto-generated by make_bridge.rb
  //
  //  Created by 田中 達也 on #{Date.today.strftime('%Y/%m/%d')}.
  //  Copyright © 2016年 tattn. All rights reserved.
  //

  import UIKit
  import JavaScriptCore

  EOS

  result << "@objc protocol JS#{classname}: JSExport {\n"

  def make_method classname, methods, static = ''
    result = ''
    methods.each do |method|
      rettype = objctype2swifttype classname, method[:return_type]
      funcname = method[:name]
      args = method[:args].map do |arg|
        "#{'_ ' unless arg[:label]}#{arg[:name]}: #{arg[:type]}"
      end.join ', ' if method[:args]

      if rettype == 'Void'
        result << "    #{static}func #{funcname}(#{args})\n"
      else
        result << "    #{static}func #{funcname}(#{args}) -> #{rettype}\n"
      end
    end
    result
  end

  result << make_method(classname, static_methods, 'static ')
  result << make_method(classname, instance_methods)

  properties.map do |property|
    name   = property[:name]
    type   = objctype2swifttype  classname, property[:type]
    type   = type + "?" if property[:nullable] and type[-1] != '?'
    static = "static " if property[:static]

    if property[:get] and property[:set]
      result << "    #{static}var #{name}: #{type} { get set }\n"
    elsif property[:get]
      result << "    #{static}var #{name}: #{type} { get }\n"
    elsif property[:set]
      result << "    #{static}var #{name}: #{type} { set }\n"
    end
  end

  result += <<~EOS
      static func new() -> UIView
  }

  extension JS#{classname} where Self: #{classname} {
      static func new() -> Self {
          return self.init()
      }
  }
  EOS

  result
end

