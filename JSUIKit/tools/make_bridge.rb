require 'net/http'
require 'date'
require_relative './objctype2swifttype'

url = "https://raw.githubusercontent.com/JaviSoto/iOS10-Runtime-Headers/master/Frameworks/UIKit.framework/UIColor.h"
uri = URI.parse(url)
source = Net::HTTP.get(uri)

def get_class_name source
  if source =~ /@interface\s+(\w+)/
    return $1
  end
  ""
end

def get_static_methods source
  # sample:
  # + (id)ab_colorWithR:(double)arg1 G:(double)arg2 B:(double)arg3 A:(double)arg4;
  
  class_name = get_class_name source

  static_methods = source.scan /^\+.+;$/

  static_methods.map do |method|
    result = { original: method }

    # メソッド名
    if method =~ /\)\s*(\w+)\s*[;:]/
      result[:name] = $1
    end

    # 戻り値
    if method =~ /\(([^)]+)\)/
      result[:return_type] = $1
    end

    # 引数
    if method =~ /:(.+);/
      args = $1
      args = args.scan /(?:\w+:)?\([^)]+\)\w+/ # ここの正規表現を考える
      # if method =~ /.*_composedColorFromSourceColor.*/
      #   puts args
      #   exit
      # end
      result[:args] = args.map do |arg|
        if arg =~ /(?:\w+:)?\(([^)]+)\)(\w+)/
          {type: $1, name: $2}
        else
          p method
          p result[:args]
          p args
          throw "Parse Error"
        end
      end
    end
    result
  end.uniq {|f| f[:name] }
end

def convert_to_swift data
  classname = data[:class_name]
  static_methods = data[:static_methods]

  result = <<~EOS
  //
  //  This was auto-generated by make_bridge.rb
  //
  //  Created by 田中 達也 on #{Date.today.strftime('%Y/%m/%d')}.
  //  Copyright © 2016年 tattn. All rights reserved.
  //

  import UIKit
  import JavaScriptCore

  EOS

  result << "@objc protocol JS#{classname}: JSExport {\n"

  static_methods.each do |static_method|
    rettype = objctype2swifttype classname, static_method[:return_type]
    funcname = static_method[:name]
    args = static_method[:args].map do |arg|
      "#{arg[:name]}: #{objctype2swifttype classname, arg[:type]}"
    end.join ', ' if static_method[:args]

    # Remove unnecessary methods
    next if ['allocWithZone'].include? funcname

    # Remove unnecessary types
    next unless ['ITColor', 'C3DColor4', 'union', 'struct {'].select{|t| args =~ /.*#{t}.*/i}.empty?

    if rettype == 'Void'
      result << "    static func #{funcname}(#{args})\n"
    else
      result << "    static func #{funcname}(#{args}) -> #{rettype}\n"
    end
  end

  result << "}\n"

  result
end

class_name     = get_class_name source
static_methods = get_static_methods source

data = {class_name: class_name, static_methods: static_methods}
swift = convert_to_swift data

output_dir = ARGV[0]
filename = "JS#{class_name}.swift"
open(File.join(output_dir, filename), "w") {|f| f.write swift}

